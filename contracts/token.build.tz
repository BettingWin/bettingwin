parameter
  (or 
    (or 
      unit                                     # function: get_token_info
      key)                                     # function: get_balance
    (or 
      (pair key nat)                           # function: transfer_token
      (or
        (or
          (pair key nat)                       # function: approve
          (pair key (pair key nat)))           # function: transfer_token_from_approved
        unit)));                               # any extension function should be added here

storage 
  (pair 
    (pair 
      (map key (map key nat))                  # approved data
      unit)                                    # any extension data should be stored here
    (pair 
      (map key nat)                            # address balance map
      (pair 
        nat                                    # total supply
        (pair 
          nat                                  # decimals
          (pair 
            string                             # name
            string)))));                       # symbol

return 
  (pair 
    nat                     # error return (0: success; 1: no such account; 2: balance insufficient; )
    (or 
      (or 
        (pair nat (pair nat (pair string string)))    # get_token_info return         
        nat)                                          # get_balance return (X: balance)
      (or
        unit                # transfer / normal return
        unit)));            # extension return should be added here

code 
  { DUP; CAR; DIP { CDR };
    IF_LEFT
      { IF_LEFT
          { # function: get_token_info
            DROP; DUP; DUP; CAR; DIP { CDR }; DROP; DUP; CAR; DIP { CDR }; DROP;
            LEFT nat;
            LEFT (or unit unit);
            PUSH nat 0; PAIR;
            PAIR }
          { # function: get_balance
            DIP { DUP; CDAR };
            GET;
            IF_SOME
              { RIGHT (pair nat (pair nat (pair string string)));
                LEFT (or unit unit);
                PUSH nat 0; PAIR;
                PAIR }
              { UNIT; LEFT unit; 
                RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                PUSH nat 1; PAIR; PAIR} } } 
      { IF_LEFT
          { # function: transfer_token
            DUP; CAR; DIP { CDR }; DIIP { DUP; CAR; DIP { CDR }; SWAP; DUP; CAR; DIP { CDR } };
            SOURCE unit unit; MANAGER;
            DUUUUP;DUUP;
            GET;
            IF_SOME
              { DUUUUP;DUUP;
                IFCMPGE
                  { DUUUUUP;DUUUUP;
                    GET;
                    IF_SOME
                      {}
                      { PUSH nat 0 }; 
                    DUUUUUP;DUUUP;
                    SUB; ABS; SOME;
                    DUUUUUUP;DUUUP;
                    ADD; SOME;
                    DUUUUUUUUP;DUUP;DUUUUUUUUP;
                    UPDATE;
                    DUP;DUUUUP;DUUUUUUUUP;
                    UPDATE;
                    DUUUUUUUUUUUP;DUUP; PAIR;
                    DIP { DROP; DROP; DROP; 
                          DROP; DROP; DROP; 
                          DROP; DROP; DROP; 
                          DROP; DROP };
                    SWAP; PAIR;
                    UNIT; LEFT unit; 
                    RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                    PUSH nat 0; PAIR; PAIR}
                  { DROP; DROP; DROP; DROP; PAIR; SWAP; PAIR; 
                    UNIT; LEFT unit; 
                    RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                    PUSH nat 2; PAIR; PAIR} } 
              { DROP; DROP; DROP; PAIR; SWAP; PAIR; 
                UNIT; LEFT unit; 
                RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                PUSH nat 1; PAIR; PAIR}}
          { IF_LEFT
              { IF_LEFT 
                  { # function: approve
                    # [(pair key nat) : storage]
                    DUP; CAR; DIP { CDR }; DIIP { DUP; CAAR; DIP { DUP; CDAR } };
                    # [ key : nat : map key (map key nat)) : (map key nat) : storage ]
                    SOURCE unit unit; MANAGER;
                    DUUUUUP;DUUP;
                    GET;
                    IF_SOME
                      { DUUUUP;DUUP;
                        IFCMPGE
                          { DUUUUP;DUUP;
                            SUB; ABS; SOME;
                            DUUUUUUUP;DUUP;DUUUUUP;
                            UPDATE;
                            DUUUUUUUP;DUUUUUP;
                            GET; 
                            IF_SOME
                              {}
                              { PUSH (map key nat) (Map ) };
                            DUP;DUUUUUUUUP;DUUUUUUUUP; DIP { SOME };
                            UPDATE;
                            SOME;
                            DUUUUUUUUUP;DUUP;DUUUUUUUUP;
                            UPDATE;
                            DUUUUUUUUUUUUP; 
                            SET_CAAR;
                            DUUUUP; SWAP; 
                            SET_CDAR;
                            DIP { DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP };
                            UNIT; LEFT unit; 
                            RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                            PUSH nat 0; PAIR; PAIR } 
                          { DROP; DROP; DROP; DROP; DROP; DROP;
                            UNIT; LEFT unit; 
                            RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                            PUSH nat 2; PAIR; PAIR} }
                      { DROP; DROP; DROP; DROP; DROP; 
                        UNIT; LEFT unit; 
                        RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                        PUSH nat 1; PAIR; PAIR} }
                  { # function: transfer_token_from_approved
                    # [(pair key (pair key nat)) : storage]
                    DUP; CAR; DIP { CDR }; DIP { DUP; CAR; DIP { CDR } }; DIIIP { DUP; CAAR; DIP { DUP; CDAR } };
                    # [ key : key : nat : (map key (map key nat)) : (map key nat) : storage]
                    DUUUUP;DUUP;
                    GET; 
                    IF_SOME
                     { DUP;DUUUUP;
                       GET; 
                       IF_SOME
                         { DUUUUUP;DUUP;
                           IFCMPGE
                             { DUUUUUP;DUUP;
                               SUB; ABS; SOME;
                               DUUUP;DUUP;DUUUUUUUP;
                               UPDATE;
                               SOME;
                               DUUUUUUUUP;DUUP;DUUUUUUUP;
                               UPDATE;
                               DUUUUUUUUUUP;DUUUUUUUUP;
                               GET;
                               IF_SOME
                                 { }
                                 { PUSH nat 0 };
                               DUUUUUUUUUP;DUUP;
                               ADD; SOME;
                               DUUUUUUUUUUUUP;DUUP;DUUUUUUUUUUUP;
                               UPDATE;
                               DUUUUUUUUUUUUUUP;
                               SET_CDAR;
                               DUUUUP; SWAP;
                               SET_CAAR;
                               DIP { DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP; DROP };
                               UNIT; LEFT unit; 
                               RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                               PUSH nat 0; PAIR; PAIR }
                             { DROP; DROP; DROP; DROP; DROP; DROP; DROP;
                               UNIT; LEFT unit; 
                               RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                               PUSH nat 2; PAIR; PAIR} }
                         { DROP; DROP; DROP; DROP; DROP; DROP;
                           UNIT; LEFT unit; 
                           RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                           PUSH nat 1; PAIR; PAIR} }
                     { DROP; DROP; DROP; DROP; DROP;
                       UNIT; LEFT unit; 
                       RIGHT (or (pair nat (pair nat (pair string string))) nat); 
                       PUSH nat 1; PAIR; PAIR} } }
              { # extension return should be added here
                RIGHT unit;
                RIGHT (or (pair nat (pair nat (pair string string))) nat);
                PUSH nat 0; PAIR;
                PAIR} } } };